from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from create_bot import dp, bot
from keyboards import kb_cancel_order_user, kb_unauthorized_user, kb_make_order_user, inline_keyboard, share_keyboard
from functions import check_user, check_order, add_user, get_last_order_id , \
    get_phone, get_id_order_message, insert_id_order_message, make_order, cancel_order, confirm_order, \
    get_last_user_order_id

from config import chat_id


class Registration(StatesGroup):
    registration_number = State()


class MakeOrder(StatesGroup):
    address_from = State()
    address_to = State()


# @dp.message_handler(commands=['start', 'help'])
async def start_handler(message: types.message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–∞–∫—Å–∏ "–î–µ–ª—å—Ç–∞"  üöï ')

    if await check_user(message.from_user.id):
        if await check_order(message.from_user.id):
            await message.answer('‚ö† –£ –≤–∞—Å —É–∂–µ –≤–∑—è—Ç –∑–∞–∫–∞–∑', reply_markup=kb_cancel_order_user)
        else:
            await message.answer('–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', reply_markup=kb_make_order_user)
    else:
        await message.answer('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å', reply_markup=kb_unauthorized_user)


# @dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def registration_handler(message: types.message):
    if message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" and not await check_user(message.from_user.id):
        await message.answer("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                             reply_markup=share_keyboard)

        await Registration.registration_number.set()
    elif message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" and await check_user(message.from_user.id):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")


# @dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def profile_handler(message: types.message):
    if await check_user(message.from_user.id):
        my_number = await get_phone(message.from_user.id)
        await message.answer(f"<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</b>\n"
                             f"–ò–º—è : <b>{message.from_user.first_name}</b>\n"
                             f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ : <b>{my_number}</b>",
                             parse_mode='html')
    else:
        await message.answer('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å', reply_markup=kb_unauthorized_user)


# @dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text='–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')
async def make_order_handler(message: types.message):
    if await check_user(message.from_user.id):
        if not await check_order(message.from_user.id):
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å :")
            await MakeOrder.address_from.set()
        elif message.text == "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑" and await check_order(message.from_user.id):
            await message.answer("–£ –≤–∞—Å —É–∂–µ –≤–∑—è—Ç –∑–∞–∫–∞–∑")
    else:
        await message.answer('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å', reply_markup=kb_unauthorized_user)


# @dp.message_handler(state=TakeOrder.address_from)
async def input_address_from(message: types.Message, state: FSMContext):
    await state.update_data(address_from=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –≤—ã –ø–æ–µ–¥–µ—Ç–µ :")
    await MakeOrder.next()


# @dp.message_handler(state=TakeOrder.address_to)
async def input_address_to(message: types.Message, state: FSMContext):
    await state.update_data(address_to=message.text)
    user_data = await state.get_data()
    address_info = [user_data.get('address_from'), user_data.get('address_to')]
    await make_order(message.from_user.id, address_info)
    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Å–ª—É–∂–±—É.\n"
                         "–ú—ã –æ–ø–æ–≤–µ—Å—Ç–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç—Å—è –≤–æ–¥–∏—Ç–µ–ª—å!\n"
                         "–≠—Ç–æ –Ω–µ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", reply_markup=kb_cancel_order_user)

    number = await get_phone(message.from_user.id)
    last_order_id = await get_last_order_id()
    id_order_message = await bot.send_message(chat_id,
                                              f"‚ùóÔ∏è <b>–ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ ‚Ññ {last_order_id}</b> ‚ùóÔ∏è\n"
                                              f"–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ : <b>{user_data['address_from']}</b>\n"
                                              f"–ö–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å : <b>{user_data['address_to']}</b>\n"
                                              f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ : <b>{number}</b>",
                                              parse_mode='html', reply_markup=inline_keyboard)

    await state.finish()
    await insert_id_order_message(message.from_user.id, id_order_message.message_id)


# @dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑')
async def cancel_order_handler(message: types.message):
    if await check_user(message.from_user.id):
        if await check_order(message.from_user.id):
            message_id = await get_id_order_message(message.from_user.id)
            order_id = await get_last_user_order_id(message.from_user.id)

            await cancel_order(message.from_user.id)

            await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=kb_make_order_user)
            await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=
                                        f"<b>‚ö† –í–Ω–∏–º–∞–Ω–∏–µ! ‚ö†</b>\n"
                                        f"–ó–∞–∫–∞–∑ <b>‚Ññ{order_id}</b> –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω!",
                                        parse_mode='html')
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', reply_markup=kb_make_order_user)
    else:
        await message.answer('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å', reply_markup=kb_unauthorized_user)


# @dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑')
async def confirm_order_handler(message: types.message):
    if await check_user(message.from_user.id):
        if await check_order(message.from_user.id):
            await confirm_order(message.from_user.id)
            await message.answer("–ó–∞–∫–∞–∑ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", reply_markup=kb_make_order_user)
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', reply_markup=kb_make_order_user)
    else:
        await message.answer('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å', reply_markup=kb_unauthorized_user)


# @dp.message_handler(state=Registration.registration_number)
async def input_number_handler(message: types.Message, state: FSMContext):
    await state.finish()
    phone_number = message.contact.phone_number
    await add_user(message.from_user.id, phone_number)

    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!")
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", reply_markup=kb_make_order_user)


# @dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE))
async def understand_message_handler(message: types.message):
    if not await check_user(message.from_user.id):
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", reply_markup=kb_unauthorized_user)
    else:
        if await check_order(message.from_user.id):
            await message.answer("–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞", reply_markup=kb_cancel_order_user)
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞", reply_markup=kb_make_order_user)


def register_handlers_user(dp: Dispatcher):
    # ['/start', '/help']
    dp.register_message_handler(start_handler, ChatTypeFilter(chat_type=types.ChatType.PRIVATE),
                                commands=['start', 'help'])
    # ['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è']
    dp.register_message_handler(registration_handler, ChatTypeFilter(chat_type=types.ChatType.PRIVATE),
                                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
    # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞
    dp.register_message_handler(input_number_handler, state=Registration.registration_number,
                                content_types=types.ContentType.CONTACT)

    # ['–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å']
    dp.register_message_handler(profile_handler, ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')

    # ['–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑']
    dp.register_message_handler(make_order_handler, ChatTypeFilter(chat_type=types.ChatType.PRIVATE),
                                text='–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')

    # ['–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑']
    dp.register_message_handler(cancel_order_handler, ChatTypeFilter(chat_type=types.ChatType.PRIVATE),
                                text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑')

    # ['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑']
    dp.register_message_handler(confirm_order_handler, ChatTypeFilter(chat_type=types.ChatType.PRIVATE),
                                text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑')
    # –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –æ—Ç –∏ –¥–æ
    dp.register_message_handler(input_address_from, state=MakeOrder.address_from)
    dp.register_message_handler(input_address_to, state=MakeOrder.address_to)

    # –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    dp.register_message_handler(understand_message_handler, ChatTypeFilter(chat_type=types.ChatType.PRIVATE))
